name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Bandit for Static Analysis
        run: |
          pip install bandit
          bandit -r todo_project -o bandit-report.txt
        continue-on-error: true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.txt

      - name: Build Docker image
        run: |
          docker build -t task-manager-app .

      - name: Run tests
        run: |
          docker run --rm task-manager-app pytest

      - name: Run OWASP Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.1.2/dependency-check-8.1.2-release.zip
          unzip dependency-check-8.1.2-release.zip
          ./dependency-check/bin/dependency-check.sh --project task-manager-app --out dependency-check-report --scan .

      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report

      - name: Publish Docker image
        if: github.ref == 'refs/heads/master'
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag task-manager-app ${{ secrets.DOCKER_USERNAME }}/task-manager-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/task-manager-app:latest

  review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Build Docker image for Review
        run: |
          docker build -t task-manager-app:review .

      - name: Deploy to Review Environment
        run: |
          docker run -d --name task-manager-review -p 5001:5000 task-manager-app:review

  deploy-stage:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Build Docker image for Stage
        run: |
          docker build -t task-manager-app:stage .

      - name: Deploy to Stage Environment
        run: |
          docker run -d --name task-manager-stage -p 5002:5000 task-manager-app:stage

  security-testing:
    runs-on: ubuntu-latest
    needs: deploy-stage
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull OWASP ZAP Image
        run: docker pull zaproxy/zap-stable

      - name: Start OWASP ZAP in Daemon Mode
        run: |
          docker run -d --name owasp-zap --network="host" \
            zaproxy/zap-stable zap.sh -daemon -host 0.0.0.0 -port 8090 \
            -config api.addrs.addr.regex=.* \
            -config api.addrs.allow=0.0.0.0/0

      - name: Wait for OWASP ZAP to start
        run: |
          echo "Waiting for OWASP ZAP to start..."
          for i in {1..60}; do
            if curl --output /dev/null --silent --head --fail http://localhost:8090; then
              echo "OWASP ZAP is running."
              break
            fi
            echo "Still waiting for OWASP ZAP..."
            sleep 15
          done
          if ! curl --output /dev/null --silent --head --fail http://localhost:8090; then
            echo "OWASP ZAP failed to start within the timeout period."
            docker logs owasp-zap
            exit 1
          fi

      - name: Verify OWASP ZAP API is reachable
        run: |
          echo "Verificando se a API do OWASP ZAP está acessível..."
          for i in {1..10}; do
            if curl --output /dev/null --silent --head --fail http://localhost:8090; then
              echo "API do OWASP ZAP está acessível."
              break
            else
              echo "API do OWASP ZAP ainda não está acessível. Aguardando..."
              sleep 10
            fi
          done
      
          if ! curl --output /dev/null --silent --head --fail http://localhost:8090; then
            echo "API do OWASP ZAP não está acessível após várias tentativas."
            exit 1
          fi

      - name: Check OWASP ZAP Logs
        run: docker logs owasp-zap

      - name: Run Security Scan with OWASP ZAP API
        run: |
          # Iniciar o spidering para o alvo
          response=$(curl -s "http://localhost:8090/JSON/spider/action/scan/?url=http://http://127.0.0.1:5000&maxChildren=10")
          if [[ "$response" == *'"result":"OK"'* ]]; then
            echo "Spidering iniciado com sucesso."
          else
            echo "Falha ao iniciar o spidering."
            exit 1
          fi

          # Esperar o spidering terminar
          echo "Esperando o spidering terminar..."
          for i in {1..60}; do
            status=$(curl -s "http://localhost:8090/JSON/spider/view/status/")
            if [[ "$status" == *'"status":"0"'* ]]; then
              echo "Spidering concluído."
              break
            fi
            echo "Spidering em andamento..."
            sleep 10
          done

          if [[ "$status" != *'"status":"0"'* ]]; then
            echo "Spidering não completou dentro do tempo limite."
            exit 1
          fi

          # Iniciar o scan ativo
          response=$(curl -s "http://localhost:8090/JSON/ascan/action/scan/?url=http://127.0.0.1:5000")
          if [[ "$response" == *'"result":"OK"'* ]]; then
            echo "Scan ativo iniciado com sucesso."
          else
            echo "Falha ao iniciar o scan ativo."
            exit 1
          fi

          # Esperar o scan ativo terminar
          echo "Esperando o scan ativo terminar..."
          for i in {1..60}; do
            progress=$(curl -s "http://localhost:8090/JSON/ascan/view/status/")
            if [[ "$progress" == *'"status":"0"'* ]]; then
              echo "Scan ativo concluído."
              break
            fi
            echo "Scan ativo em andamento..."
            sleep 10
          done

          if [[ "$progress" != *'"status":"0"'* ]]; then
            echo "Scan ativo não completou dentro do tempo limite."
            exit 1
          fi

      - name: Ensure OWASP ZAP is running
        run: |
          echo "Waiting for OWASP ZAP to start..."
          for i in {1..60}; do
            if curl --output /dev/null --silent --head --fail http://localhost:8090; then
              echo "OWASP ZAP is running."
              break
            fi
            echo "Still waiting for OWASP ZAP..."
            sleep 15
          done
          if ! curl --output /dev/null --silent --head --fail http://localhost:8090; then
            echo "OWASP ZAP failed to start within the timeout period."
            docker logs owasp-zap
            exit 1
          fi
        
      - name: Check OWASP ZAP Logs for Errors
        run: docker logs owasp-zap

      - name: Retrieve ZAP Report
        run: |
          sleep 60  # Aguardar tempo extra para garantir que o relatório esteja pronto
          curl "http://localhost:8090/OTHER/core/other/htmlreport/?" -o zap_report.html
      
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap_report.html
      
      - name: Stop OWASP ZAP
        run: docker stop owasp-zap && docker rm owasp-zap